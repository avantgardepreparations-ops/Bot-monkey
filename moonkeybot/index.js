
const { Client, GatewayIntentBits, Collection } = require('discord.js');
const { BOT_TOKEN } = require('./config');
const fs = require('fs');
const RouletteGame = require('./games/roulette');
const BlackjackGame = require('./games/blackjack');
const PokerGame = require('./games/poker');

const client = new Client({ 
    intents: [
        GatewayIntentBits.Guilds, 
        GatewayIntentBits.GuildMessages, 
        GatewayIntentBits.MessageContent
    ] 
});

client.commands = new Collection();

// Charger toutes les commandes
const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    try {
        const command = require(`./commands/${file}`);
        if (command.data && command.execute) {
            client.commands.set(command.data.name, command);
            console.log(`‚úÖ Commande ${command.data.name} charg√©e`);
        } else {
            console.log(`‚ö†Ô∏è  Fichier ${file} ignor√© - structure invalide`);
        }
    } catch (error) {
        console.error(`‚ùå Erreur lors du chargement de ${file}:`, error);
    }
}

client.once('ready', () => {
    console.log(`üé≤ Bot ${client.user.tag} connect√© !`);
    console.log(`üìä ${client.commands.size} commandes charg√©es`);
});

client.on('interactionCreate', async interaction => {
    try {
        if (interaction.isButton()) {
            // Gestion des boutons pour les slots
            if (interaction.customId.startsWith('lock_') || 
                interaction.customId === 'cashout' || 
                interaction.customId === 'double' || 
                interaction.customId === 'quadruple') {
                const slotsCommand = client.commands.get('slots');
                if (slotsCommand) {
                    await slotsCommand.execute(interaction);
                }
            }
            // Gestion des boutons pour le blackjack
            else if (interaction.customId.startsWith('blackjack_')) {
                await BlackjackGame.handleButtonInteraction(interaction);
            }
            // Gestion des boutons pour le poker
            else if (interaction.customId.startsWith('poker_')) {
                await PokerGame.handleButtonInteraction(interaction);
            }
            // Gestion des boutons pour la roulette
            else if (interaction.customId.startsWith('roulette_spin_')) {
                await RouletteGame.spinWheel(interaction);
            }
            return;
        }

        if (interaction.isStringSelectMenu()) {
            // Gestion du menu de s√©lection pour la roulette
            if (interaction.customId.startsWith('roulette_select_')) {
                await RouletteGame.handleSelectMenu(interaction);
            }
            return;
        }

        if (!interaction.isChatInputCommand()) return;

        const command = client.commands.get(interaction.commandName);
        if (!command) {
            console.error(`‚ùå Commande inconnue: ${interaction.commandName}`);
            return;
        }

        console.log(`üéØ ${interaction.user.tag} utilise /${interaction.commandName}`);
        await command.execute(interaction);
    } catch (error) {
        console.error(`‚ùå Erreur lors de l'interaction:`, error);

        const errorMessage = {
            content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de cette commande!',
            flags: 64
        };

        if (interaction.replied || interaction.deferred) {
            await interaction.followUp(errorMessage);
        } else {
            await interaction.reply(errorMessage);
        }
    }
});

client.login(BOT_TOKEN);
